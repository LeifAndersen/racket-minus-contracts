diff --git a/racket/collects/racket/contract/private/base.rkt b/racket/collects/racket/contract/private/base.rkt
index aee46da..7cc3a7c 100644
--- a/racket/collects/racket/contract/private/base.rkt
+++ b/racket/collects/racket/contract/private/base.rkt
@@ -35,13 +35,10 @@
 (define-syntax (contract stx)
   (syntax-case stx ()
     [(_ c v pos neg name loc)
-     (syntax/loc stx
-       (apply-contract c v pos neg name loc))]
+     (syntax/loc stx v)]
     [(_ c v pos neg)
      (with-syntax ([name (syntax-local-infer-name stx)])
-      (syntax/loc stx
-        (apply-contract c v pos neg 'name
-                        (build-source-location #f))))]
+      (syntax/loc stx v))]
     [(_ c v pos neg src)
      (raise-syntax-error 'contract
        (string-append
diff --git a/racket/collects/racket/contract/private/provide.rkt b/racket/collects/racket/contract/private/provide.rkt
index d874ae1..b73baff 100644
--- a/racket/collects/racket/contract/private/provide.rkt
+++ b/racket/collects/racket/contract/private/provide.rkt
@@ -350,42 +350,7 @@
             (raise-syntax-error #f "expected an identifier" stx #'new-id))
           (unless (identifier? #'orig-id)
             (raise-syntax-error #f "expected an identifier" stx #'orig-id))
-          (define-values (pos-blame-party-expr srcloc-expr)
-            (let loop ([kwd-args (syntax->list #'(kwd-args ...))]
-                       [pos-blame-party-expr #'(quote-module-path)]
-                       [srcloc-expr #f])
-              (cond
-                [(null? kwd-args) (values pos-blame-party-expr
-                                          (or srcloc-expr (stx->srcloc-expr stx)))]
-                [else
-                 (define kwd (car kwd-args))
-                 (cond 
-                   [(equal? (syntax-e kwd) '#:pos-source)
-                    (when (null? (cdr kwd-args))
-                      (raise-syntax-error #f "expected a keyword argument to follow #:pos-source"
-                                          stx))
-                    (loop (cddr kwd-args)
-                          (cadr kwd-args)
-                          srcloc-expr)]
-                   [(equal? (syntax-e kwd) '#:srcloc)
-                    (when (null? (cdr kwd-args))
-                      (raise-syntax-error #f "expected a keyword argument to follow #:srcloc"
-                                          stx))
-                    (loop (cddr kwd-args)
-                          pos-blame-party-expr
-                          (cadr kwd-args))]
-                   [else
-                    (raise-syntax-error #f "expected either the keyword #:pos-source of #:srcloc"
-                                        stx
-                                        (car kwd-args))])])))
-          (internal-function-to-be-figured-out #'ctrct
-                                               #'orig-id
-                                               #'orig-id
-                                               #'new-id
-                                               #'new-id
-                                               srcloc-expr
-                                               'define-module-boundary-contract
-                                               pos-blame-party-expr))])]))
+          #'(define new-id orig-id))])]))
 
 ;; ... -> (or/c #f (-> blame val))
 (define (do-partial-app ctc val name pos-module-source source)
@@ -1028,9 +993,10 @@
              #`(define #,x-gen (new-âˆ€/c '#,x))))
 
        (define (add-exists-binders stx exists-binders)
+         (let ([stx (syntax any/c)])
          (if (null? exists-binders)
              stx
-             #`(let #,exists-binders #,stx)))
+             #`(let #,exists-binders #,stx))))
 
        (define (add-a-binder id id-gen binders)
          (cons #`[#,id #,id-gen] binders))
